/* main.cpp
 *
 *  Created on: Apr 22, 2023
 *      Author: ayaanle
 */
 
 
#include <iostream>
#include <boost/filesystem.hpp>
#include <assert.h>
#include <chrono>
#include <vector>
#include <fstream>
#include <ctime>
#include <regex>
#include <errno.h>
#include "sysinfo.h"
using namespace std;
// some members of filesystem namespace
using boost::filesystem::exists;
using boost::filesystem::is_directory;
using boost::filesystem::is_empty;
using boost::filesystem::perms;
using boost::filesystem::permissions;
#ifdef _SYS_SINGLE_THREADED_H
   cout << "This single threaded header file has been defined..." << endl;
#endif
class Startup
{
public:
    constexpr explicit Startup();
    volatile inline std::clock_t time_steps(clock_t) ;
    friend const struct system_info* sys_info(struct system_info* sys_info);
    constexpr inline void init_malware(string program );
};
volatile inline std::clock_t Startup::time_steps(clock_t clk , std::chrono::system_clock)
{
    mutable auto now = std::chrono::system_clock::now();
    if(std::chrono::is_clock_v<std::chrono::utc_clock>::value)
    {
       // the value is been satisfied to be of Clock type
       cout << fixed << setprecision(2)
        << "Synchronising with the cpu time " << endl;
    }
    const auto time = std::chrono::system_clock::to_time_t(now);
    clk = clock(&time);
    return clk;
}
 string extract_info(string str)
{
   regex rgx;
   regex::iterator it;
   
   string str = *iterator;
   fstream fc;
   fc.open();
   
}
constexpr void disk_struct::file_stat(path* path)
{
    path->
}
// you first need to check the required files for the prank
bool check_files(boost::filesystem::path p)
{
    if(exists(p) and (p.has_extension() or p.has_filename() ))
    {
        if(is_directory(p.))
    }
}
int main(int argc , char* argv[])
{
    const clock_t& clock;
    disk_struct ds;
    string str;
    vector<string>paths = {"/proc/cpuinfo" ,
                                     "/proc/memstat" ,
                                     "/proc/stat"};  
    fstream strm;
    vector<string>::iterator it;                        
    for(it = paths.begin();it!=paths.end();++it)
    {
       // accessing the most important hardware config infos
      str = *it;
      strm.open(str, ios_base::in);
      if (!strm.is_open() and ) {
         cout << "Open file failed" << endl;
         return 1;
    }
    char c;

    while (!strm.eof()) {
        strm.get(c);
        cout << c;
    }
    }
    cout << str << endl;

    strm.close();
    Startup startup = Startup();
    return 0;
}


