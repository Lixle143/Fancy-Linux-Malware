/* main.cpp
 *
 *  Created on: Apr 22, 2023
 *      Author: ayaanle
 */
#include <iostream>
#include <boost/filesystem.hpp>
#include <assert.h>
#include <chrono>
#include <ctime>
#include <thread>
#include <regex>
#include <errno.h>
#include "sysinfo.h"
using namespace std;
// some members of filesystem namespace
using boost::filesystem::exists;
using boost::filesystem::is_directory;
using boost::filesystem::is_empty;
using boost::filesystem::perms;
using boost::filesystem::permissions;
#ifdef _SYS_SINGLE_THREADED_H
   cout << "This single threaded header file has been defined..." << endl;
#endif
class Startup
{
public:
    constexpr explicit Startup();
    volatile inline std::clock_t time_steps(clock_t) ;
    friend const struct system_info* sys_info(struct system_info* sys_info);
    constexpr inline void init_malware(string program );
};
volatile inline std::clock_t Startup::time_steps(clock_t clk)
{
    clk = clock();
}
constexpr void disk_struct::file_stat(path* path)
{
    path->
}
// you first need to check the required files for the prank
bool check_files(boost::filesystem::path p)
{
    if(exists(p) && (p.has_extension() || p.has_filename() ))
    {
        if(is_directory(p.))
    }
}
int main(int argc , char* argv[])
{
    const clock_t& clock;
    disk_struct ds;
    std::vector<std::string>paths = {""};
    Startup startup = Startup();
    return 0;
}


